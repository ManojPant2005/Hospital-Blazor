@page "/DoctorManagement"

@attribute [Authorize(Roles ="Admin, SR")]

@inject IDoctorManagementService DoctorManagementService

<h3 class="mb-4" style="font-family:Algerian">Doctor Administration</h3>

<div style="max-width:1100px">
    <SfGrid @ref="SfEmployeeGrid" AllowFiltering="true" AllowPaging="true" AllowGrouping="true" AllowExcelExport="true" AllowPdfExport="true" AllowSorting="true" DataSource="employeeData" Toolbar="@toolbar">
        <GridEditSettings Mode="EditMode.Dialog" AllowAdding="true" AllowEditing="true" AllowDeleting="true">
            <HeaderTemplate>
                <span>@(GetDialogHeaderText(context as DoctorModel))</span>
            </HeaderTemplate>
            <FooterTemplate>
                <SfButton OnClick="@Save" IsPrimary="true">@DialogButtonCaption</SfButton>
                    <SfButton OnClick="@Cancel">Cancel</SfButton>
                </FooterTemplate>
            </GridEditSettings>
            <GridPageSettings PageSize="6"></GridPageSettings>
            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
            <GridEvents OnBatchSave="OnBatchUpdateHandler" CommandClicked="OnCommandClicked" OnToolbarClick="ToolbarBtnClickHandler" OnActionBegin="ActionBeginHandler" OnActionComplete="ActionCompleteHandler" TValue="DoctorModel"></GridEvents>
            <GridColumns>
                <GridColumn AllowAdding="false" IsPrimaryKey="true" Field="@nameof(DoctorModel.Id)" Width="50px"></GridColumn>
                <GridColumn AllowAdding="false" AllowEditing="false" HeaderText="Profile" Width="120px">
                    <Template>
                        @{
                        var employee = (context as DoctorModel);
                        <div class="profile-image-container">
                            <img src="@(employee?.ImagePath)" />
                        </div>
                    }
                </Template>
            </GridColumn>
            <GridColumn HeaderText="First Name" Field="@nameof(DoctorModel.FirstName)" Width="120px"></GridColumn>
            <GridColumn HeaderText="Last Name" Field="@nameof(DoctorModel.LastName)" Width="120px"></GridColumn>
            <GridForeignColumn HeaderText="Designation" TValue="DoctorJobTitle"
                               Field="@nameof(DoctorModel.DoctorJobTitleId)"
                               ForeignDataSource="employeeJobTitleData"
                               ForeignKeyValue="Name" Width="100px">
                <EditTemplate>
                    <SfDropDownList @bind-value="@((context as DoctorModel).DoctorJobTitleId)"
                                    ID="EmployeeJobTitleId"
                                    DataSource="employeeJobTitleData" TItem="DoctorJobTitle"
                                    TValue="int">
                        <DropDownListFieldSettings Text="Name" Value="DoctorJobTitleId">
                        </DropDownListFieldSettings>

                    </SfDropDownList>
                </EditTemplate>
            </GridForeignColumn>
            <GridColumn Field="@nameof(DoctorModel.Gender)" Width="100px">
                <EditTemplate>
                    <SfDropDownList DataSource="genderCollection" TItem="string" TValue="string"
                                    @bind-value="@((context as DoctorModel).Gender)">

                    </SfDropDownList>
                </EditTemplate>
            </GridColumn>
            <GridColumn Field="@nameof(DoctorModel.Email)" Width="120px">

            </GridColumn>
            <GridColumn HeaderText="DOB" Field="@nameof(DoctorModel.DateOfBirth)" Format="d"></GridColumn>

            <GridForeignColumn HeaderText="Reports To" TValue="ReportToModel"
                               Field="@nameof(DoctorModel.ReportToDctId)"
                               ForeignDataSource="reportToEmployeeData"
                               ForeignKeyValue="ReportToName" Width="130px">
                <EditTemplate>
                    <SfDropDownList @bind-value="@((context as DoctorModel).ReportToDctId)"
                                    ID="ReportToEmpId"
                                    DataSource="reportToEmployeeData" TItem="ReportToModel"
                                    TValue="Nullable<int>">
                        <DropDownListFieldSettings Text="ReportToName" Value="ReportToEmpId">
                        </DropDownListFieldSettings>

                    </SfDropDownList>
                </EditTemplate>
            </GridForeignColumn>
            <GridColumn HeaderText="Operations" Width="110">
                <GridCommandColumns>
                    <GridCommandColumn Type="CommandButtonType.Edit"
                                       ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-edit",
                                                CssClass ="e-flat"
                                            })">

                    </GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Delete"
                                       ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-delete",
                                                CssClass ="e-flat"
                                            })">

                    </GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Save"
                                       ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-update",
                                                CssClass ="e-flat"
                                            })">

                    </GridCommandColumn>
                    <GridCommandColumn Type="CommandButtonType.Cancel"
                                       ButtonOption="@(new CommandButtonOptions(){
                                                IconCss = "e-icons e-cancel-icon",
                                                CssClass ="e-flat"
                                            })">

                    </GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
            <GridColumn HeaderText="Custom Operations" Width="110">
                <GridCommandColumns>
                    <GridCommandColumn ButtonOption="@(new CommandButtonOptions(){
                                                Content = "O1",
                                                CssClass = "e-outline"
                                            })">

                    </GridCommandColumn>
                    <GridCommandColumn ButtonOption="@(new CommandButtonOptions(){
                                                Content = "O2",
                                                CssClass = "e-outline"
                                            })">

                    </GridCommandColumn>
                </GridCommandColumns>
            </GridColumn>
        </GridColumns>
        <SfSpinner @bind-Visible="@VisibleProp"></SfSpinner>
    </SfGrid>
</div>
<style>
    .profile-image-container {
        width: 80px;
        height: 80px;
    }

        .profile-image-container img {
            width: 100%;
            height: 100%;
            border-radius: 50px;
        }
</style>

@code {

    private enum GenderVal
    {
        Male,
        Female,
        Other
    }

    private string[] GroupedColumns = (new string[] { "ReportToEmpId", "Gender" });

    private string DialogButtonCaption { get; set; }

    private SfGrid<DoctorModel>? SfEmployeeGrid { get; set; }

    private bool VisibleProp { get; set; } = false;

    private string[] genderCollection = Enum.GetNames(typeof(GenderVal));

    private List<DoctorModel>? employeeData = null;
    private List<DoctorJobTitle>? employeeJobTitleData;
    private List<ReportToModel>? reportToEmployeeData;
    //private List<object> toolbar = new List<object> {"Add","Edit","Delete","Update","Cancel", "Search","ExcelExport","PdfExport",
    //                     new ItemModel(){Text = "XML Export", TooltipText ="Export Data to XML",
    //                                    PrefixIcon = "e-click", Id = "XmlExport"} };
    private List<object> toolbar = new List<object> { "Add", "Update", "Cancel", "Search","ExcelExport","PdfExport",
    new ItemModel(){Text = "XML Export", TooltipText ="Export Data to XML",
                                        PrefixIcon = "e-click", Id = "XmlExport"} };

    protected override async Task OnInitializedAsync()
    {
        VisibleProp = true;

        employeeData = await DoctorManagementService.GetDoctors();
        employeeJobTitleData = await DoctorManagementService.GetJobTitles();
        reportToEmployeeData = await DoctorManagementService.GetReportToDoctors();

        VisibleProp = false;

    }
    public async void ActionBeginHandler(ActionEventArgs<DoctorModel> args)
    {

        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                await DoctorManagementService.AddDoctor(args.Data);

            }
            else if (args.Action == "Edit")
            {
                await DoctorManagementService.UpdateDoctor(args.Data);
            }

        }
        else if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Delete))
        {
            await DoctorManagementService.DeleteDoctor(args.Data.Id);
        }
    }
    public async void ActionCompleteHandler(ActionEventArgs<DoctorModel> args)
    {
        if (args.RequestType.Equals(Syncfusion.Blazor.Grids.Action.Save))
        {
            if (args.Action == "Add")
            {
                employeeData = await DoctorManagementService.GetDoctors();
                SfEmployeeGrid?.Refresh();
            }
        }
    }
    public async void ToolbarBtnClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id.Contains("_excelexport"))
        {
            await SfEmployeeGrid.ExportToExcelAsync();

        }
        else if (args.Item.Id.Contains("_pdfexport"))
        {
            await SfEmployeeGrid.ExportToPdfAsync();
        }
        else if (args.Item.Id == "XmlExport")
        {
            Console.Write("Export to Xml functionality");
        }
    }
    public async void OnCommandClicked(CommandClickEventArgs<DoctorModel> args)
    {
        if (args.CommandColumn.ButtonOption.Content == "O1")
        {
            Console.Write("Custom Operation 1");
        }
        else if (args.CommandColumn.ButtonOption.Content == "O2")
        {
            Console.Write("Custom Operation 2");
        }
    }

    private string GetDialogHeaderText(DoctorModel employeeModel)
    {
        if (employeeModel.Id == 0)
        {
            DialogButtonCaption = "Add";
            return "Add Employee";
        }
        else
        {
            DialogButtonCaption = "Update";
            return $"Edit Details: {employeeModel.FirstName} {employeeModel.LastName}";
        }
    }

    private async Task Cancel()
    {
        await SfEmployeeGrid.CloseEditAsync();
    }
    private async Task Save()
    {
        await SfEmployeeGrid.EndEditAsync();
    }

    public async Task OnBatchUpdateHandler(BeforeBatchSaveArgs<DoctorModel> args)
    {
        var addedRecords = args.BatchChanges.AddedRecords;
        var updatedRecords = args.BatchChanges.ChangedRecords;
        var deletedRecords = args.BatchChanges.DeletedRecords;

        foreach (DoctorModel employee in addedRecords)
        {
            await DoctorManagementService.AddDoctor(employee);
        }
        foreach (DoctorModel employee in updatedRecords)
        {
            await DoctorManagementService.UpdateDoctor(employee);
        }
        foreach (DoctorModel employee in deletedRecords)
        {
            await DoctorManagementService.DeleteDoctor(employee.Id);
        }

    }

}